<?php

namespace frontend\controllers;

use frontend\models\EcnAltgroup;
use frontend\models\EcnChangeSet;
use frontend\models\EcnPartUser;
use Yii;
use frontend\models\Ecn;
use frontend\models\EcnSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use frontend\models\Tasks;
use frontend\models\ExtBomsParent;
use frontend\models\EcApproval;
use frontend\models\UserTask;
use yii\data\ActiveDataProvider;

/**
 * EcnController implements the CRUD actions for Ecn model.
 *
 *
 *
 */
class EcnController extends Controller
{
    const ECN_CREATE='新增ECN';
    const ECN_UPDATE = '更新ECN';

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all Ecn models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new EcnSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Ecn model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id,$idUserTask=-1)
    {
        //审批人数据
        $taskId = Tasks::findOne(['type'=>Tasks::TASK_TYPE_ECN,'type_id'=>$id])->id;
        $query = UserTask::find()->where(['task_id'=>$taskId]);
        $dataApprover = new ActiveDataProvider([
            'query' => $query,
        ]);
        //变更集合的数据
        $changeSets = EcnChangeSet::findAll(['ecn_id'=>$id]);

        $mdlUserTask = null;
        if($idUserTask != -1)
        {
            $mdlUserTask = UserTask::findOne($idUserTask);
        }


        return $this->render('view', [
            'model' => $this->findModel($id),
            'dataProvider' => $dataApprover,
            'changeSets'=>$changeSets,
            'mdlUserTask'=>$mdlUserTask
        ]);
    }

    /**
     * Creates a new Ecn model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate($TaskId)
    {
        //die;
        $model = new Ecn();
        //得到相关联的ECR
        $EcrId = Tasks::findOne($TaskId)->type_id;
        //给模型添加上编号，时间，状态，用户等数据
        $model->addAutoData($EcrId);

        if ($model->load(Yii::$app->request->post()))
        {
            $transaction = Yii::$app->db->beginTransaction();//开户事务
            $isSuc = true;//标志着是否保存成功
            if(!$model->save())//保存ECN
                $isSuc = false;
            if($isSuc == false || !$model->saveChangeSet())//保存变更集合
                $isSuc = false;
            if($isSuc == true && Tasks::updateAll(['status'=>Tasks::STATUS_APPROVED],['id'=>$TaskId]))//以上保存成功
            {
                //提交任务//立即提交或稍后提交成功后就保存到数据库
                if(Tasks::generateTask(Tasks::TASK_TYPE_ECN,$model->id,$this::ECN_CREATE))
                {
                    //提交到数据库
                    $transaction->commit();
                    return $this->redirect(['/tasks/index']);
                }
            }
            $model->isNewRecord = true;
            Yii::$app->getSession()->setFlash('error', "保存失败");
            //不成功回退
            $transaction->rollBack();
        }
        //把关联的ECR数据分配给ECN
        $model->assignEcrDate($EcrId);

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing Ecn model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        $model->addAutoData();//更新下时间
        if ($model->load(Yii::$app->request->post())) {
            $transaction = Yii::$app->db->beginTransaction();//开户事务
            $isSuc = true;//标志着是否更新成功
            if(!$model->save())//更新ECN
                $isSuc = false;

            //得到跟这个ECN有关的使用者id
            $delPartUser = EcnPartUser::find()->leftJoin('ecn_change_set','ecn_part_user.ecn_change_id=ecn_change_set.id')
                ->where('ecn_change_set.ecn_id='.$id)->select('ecn_part_user.id as PartUserId')->column();

            //得到跟这个ECN有关的群组id
            $delAltGroup = EcnAltgroup::find()->innerJoin('ecn_part_user','ecn_part_user.id=ecn_altgroup.part_user_id')
                ->where(['in','ecn_altgroup.part_user_id',$delPartUser])->select('ecn_altgroup.id as AltgroupId')->column();
            //更新是要把之前全删掉，然后再保存当前的数据
            if($isSuc == false || !EcnChangeSet::deleteAll(['ecn_id'=>$id]) || !$model->saveChangeSet() ||
                !EcnPartUser::deleteAll(['in','id',$delPartUser]))//更新变更集合
                $isSuc = false;
            if(!empty($delAltGroup))
                EcnAltgroup::deleteAll(['in','id',$delAltGroup]);
            if($isSuc == true)//以上保存成功
            {
                //          （如果是立即提交    并    审批数据也保存或更新成功 )                         要么就是稍后提交
                if(($_POST['taskCommit'] == 1&&UserTask::saveTaskUpdate(Tasks::TASK_TYPE_ECN,$id))||$_POST['taskCommit'] == 0)
                {
                    $transaction->commit();
                    return $this->redirect(['/tasks/index']);
                }
            }
            //不成功回退
            Yii::$app->getSession()->setFlash('error', "更新失败");
            $transaction->rollBack();
        }
        //变更集合的数据

        return $this->render('update', [
            'model' => $model,
            'changeSet'=>$model->getDataUpdate(),

        ]);
    }

    /**
     * Deletes an existing Ecn model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Ecn model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Ecn the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Ecn::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    /**
     * 寻找使用都的函数，返回该料的上一级
     */
    public function actionGetUpperLvl($id_child,$changeType,$id)
    {
        $arrData = ExtBomsParent::getParentByChild($id_child,$changeType,$id)->asArray()->all();
        return json_encode(['status' => 1, 'message' => '', 'data' => $arrData]);
    }




}
