<?php

namespace frontend\models;

use Yii;
use backend\models\User;
use yii\behaviors\TimestampBehavior;
use common\components\CommonFunc;

/**
 * This is the model class for table "user_task".
 *
 * @property integer $id
 * @property integer $task_id
 * @property integer $user_id
 * @property integer $status
 * @property string $remark
 * @property integer $updated_at
 */
class UserTask extends \yii\db\ActiveRecord
{
    /*********审批状态********/
    const STATUS_APPROVE = [0=>'待审批',1=>'审批拒绝',2=>'审批同意',];
    const STATUS_UNAPPROVE = 0;
    const STATUS_REJECTED = 1;
    const STATUS_APPROVED = 2;

    //任务的备注
    public $userTaskRemark;
    public $userTaskStatus;
    //提交的时间
    public $dateApprove;

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'user_task';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['task_id', 'user_id', 'status'], 'required'],
            [['task_id', 'user_id', 'status', 'updated_at','created_at'], 'integer'],
            [['remark'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('material', 'ID'),
            'task_id' => Yii::t('material', '任务ID'),
            'user_id' => Yii::t('material', '用户ID'),
            'status' => Yii::t('material', '审批或提交的状态'),
            'remark' => Yii::t('material', '备注'),
            'updated_at' => Yii::t('material', '更新时间'),
            'created_at' => Yii::t('material', '更新时间'),
        ];
    }

    //关联任务表
    public function getTasks()
    {
        return $this->hasOne(Tasks::className(),['id'=>'task_id']);
    }

    //关联用户表
    public function getUser()
    {
        return $this->hasOne(User::className(),['id'=>'user_id']);
    }

    /**
     * 根据个人任务如果更新时是立即提交，提交类型（被退回还是待提交），来更改或新增审批数据
     */
    public static function saveTaskUpdate($taskType,$taskTypeId)
    {
        $mailAddr =[];//邮件地址
        $task = Tasks::findOne(['type'=>$taskType,'type_id'=>$taskTypeId]);
        if($task->status == Tasks::STATUS_REJECTED)//如果更改的这个任务是退回的，只把审批任务里的人同步一下并改下审批状态
        {
            $task->syncApprover();//让审批人表里的人与审批任务表里的人同步
            if(!self::updateAll(['status'=>self::STATUS_UNAPPROVE],['task_id'=>$task->id]))
                return false;
            $mailAddr = EcApproval::find()->leftJoin('User','User.id=ec_approval.user_id')->
            select('User.email as emailAddr,ec_approval.user_id as uid')->
            where(['ec_approval.type'=>$taskType,'ec_approval.ec_id'=>$taskTypeId])->indexBy('uid')->column();
        }
        else if($task->status == Tasks::STATUS_UNCOMMIT)//如果没有提交这个任务(待提交)，要生成审批人审批
        {
            //找到审批人的邮箱
            $approverIds = EcApproval::find()->leftJoin('User','User.id=ec_approval.user_id')->
                        select('ec_approval.user_id as uid,User.email as emailAddr')->
                        where(['ec_approval.type'=>$taskType,'ec_approval.ec_id'=>$taskTypeId])->asArray()->all();
            foreach ($approverIds as $userId)//生成审批任务
            {
                $userTask = new self();
                $userTask->task_id = $task->id;
                $userTask->user_id = $userId['uid'];
                $mailAddr[]= $userId['emailAddr'];
                $userTask->updated_at = time();
                $userTask->status = 0;
                if(!$userTask->save())
                    return false;
            }
        }
        $task->status = Tasks::STATUS_COMMITED;
        $task->remark = $_POST['taskRemark'];
        if(!$task->save())
            return false;

        //发邮件
        $taskCode = '';
        if($taskType == Tasks::TASK_TYPE_ECR)
            $taskCode = $task->ecr->serial_number;
        else if($taskType == Tasks::TASK_TYPE_MATERIAL)
            $taskCode = $task->modifyMaterial->mfr_part_number;
        else if($taskType == Tasks::TASK_TYPE_ECN)
            $taskCode = $task->ecn->serial_number;
        CommonFunc::sendMail(CommonFunc::APPROVE_NOTICE,$mailAddr,$task->name,$taskCode,'user_task/index');

        return true;

    }

}
