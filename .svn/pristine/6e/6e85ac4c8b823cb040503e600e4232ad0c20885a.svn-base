<?php

namespace frontend\controllers;

use Yii;
use frontend\models\Ecn;
use frontend\models\EcnSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use frontend\models\Tasks;
use frontend\models\Boms;

/**
 * EcnController implements the CRUD actions for Ecn model.
 */
class EcnController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all Ecn models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new EcnSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Ecn model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Ecn model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate($TaskId)
    {
        $model = new Ecn();
        if ($model->load(Yii::$app->request->post()) /*&& $model->save()*/) {
            var_dump(Yii::$app->request->post()['Ecn']['userParent']);
            var_dump(Yii::$app->request->post());die;
            return $this->redirect(['view', 'id' => $model->id]);
        }
        //把关联的ECR数据分配给ECN
        $EcrId = Tasks::findOne($TaskId)->type_id;
        $model->assignEcrDate($EcrId);
        //给模型添加上编号，时间，状态，用户等数据
        $model->addAutoData();

        return $this->render('create', [
            'model' => $model,
            'dataUser'=>$model->getUserArr()
        ]);
    }

    /**
     * Updates an existing Ecn model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing Ecn model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Ecn model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Ecn the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Ecn::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    /**
     * 寻找使用都的函数，返回该料的上一级
     */
    public function actionGetUpperLvl($id_child)
    {
        $arrData = Boms::getParentByChild($id_child)->asArray()->all();
        return json_encode(['status' => 1, 'message' => '', 'data' => $arrData]);
    }


    /**
     * 得到使用者
     */
    public static function getParentByChild($idChild)
    {
        return self::find()->innerJoin('materials as mtrParent','boms.parent_id=mtrParent.material_id')
            ->leftJoin('materials as mfr2','boms.2zc_part_number_id=mtrParent.material_id')
            ->leftJoin('materials as mfr3','boms.3zc_part_number_id=mtrParent.material_id')
            ->leftJoin('materials as mfr4','boms.4zc_part_number_id=mtrParent.material_id')
            ->select('boms.id as idBom,
                    mtrParent.zc_part_number as userZcPartNo,
                    mtrParent.description as userDesc')
            ->where(['boms.child_id'=>$idChild])->groupBy(['parent_id']);
    }



}
