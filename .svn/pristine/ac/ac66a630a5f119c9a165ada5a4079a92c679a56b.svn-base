<?php

namespace frontend\controllers;

use common\components\CommonFunc;
use common\models\User;
use frontend\models\Ecn;
use frontend\models\Ecr;
use Yii;
use frontend\models\Tasks;
use frontend\models\TasksSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use frontend\models\UserTask;
use yii\filters\AccessControl;


/**
 * TasksController implements the CRUD actions for Tasks model.
 */
class TasksController extends Controller
{
    //审批人ID

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['index'],
                'rules' => [
                    [
                        'actions' => ['index'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all Tasks models.
     * @return mixed
     */
    public function actionIndex()
    {
//        $model = new Tasks();
//        var_dump($model->find()->select('remark as AA,id')->all() );die;
        $searchModel = new TasksSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        //                      只找当前用户自己的任务并且是未提交和被拒的任务
        //$dataProvider->query->where(['tasks.status'=>[Tasks::STATUS_UNCOMMIT,Tasks::STATUS_REJECTED]])->andWhere(["tasks.user_id"=>Yii::$app->user->id]);
        //自己所有的任务都显示
        $dataProvider->query->Where(["tasks.user_id"=>Yii::$app->user->id]);
        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * 任务管理：只有管理员能看到
     */
    public function actionAdminIndex()
    {
        $searchModel = new TasksSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        $dataUser = User::find()->select('username,id')->indexBy('id')->column();

        return $this->render('admin-index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'dataUser'=>$dataUser,
        ]);

    }

    /**
     * 任务重新指派
     */
    public function actionChangeUser()
    {
        if (isset($_POST['hasEditable']))
        {
            Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;//这个表格编辑控件需要的
            $mdlTasks = Tasks::findOne($_POST['editableKey']);
            $data = current($_POST['Tasks']);//表单数据
            $mdlTasks->user_id = $data['user_id'];
            if($mdlTasks->save())
                return ['output'=>'', 'message'=>''];
        }
        return ['output'=>'', 'message'=>'更新失败'];
    }


    /**
     * Displays a single Tasks model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Tasks model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Tasks();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing Tasks model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * 功能：删除任务： 1.把该任务的审批人也删除掉。
     *                2.要根据任务类型，把每种类型都删除掉。
     *                3.把该任务也删除掉。
     * Deletes an existing Tasks model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $transaction = Yii::$app->db->beginTransaction();


        $mdlTask = Tasks::findOne($id);
        //1.把该任务的审批 人删除掉
        $isSuc = UserTask::deleteAll(['task_id'=>$mdlTask->id]);

        //2.如果上一步成功，根据任务类开，删除任务
        if($isSuc&&$mdlTask->deleteTask())
        {
            Yii::$app->getSession()->setFlash('success', "删除成功");
            $transaction->commit();
        }
        else
        {
            Yii::$app->getSession()->setFlash('error', "删除失败");
            $transaction->rollBack();
        }


        return $this->redirect($_SERVER['HTTP_REFERER']);
    }

    /**
     * 撤消任务
     */
//    public function actionUndo($id)
//    {
//        $tran = Yii::$app->getDb()->beginTransaction();
//        $isSuc = true;
//
//        $mdlTask = Tasks::findOne($id);
//
//
//        $mdlTask->status = Tasks::STATUS_UNCOMMIT;
//
//        if(!$mdlTask->save())
//            $isSuc = false;
//        if($isSuc&&UserTask::deleteAll(['task_id'=>$mdlTask->id]))
//            $tran->commit();
//        else
//            $tran->rollBack();
//
//
//        return $this->redirect($_SERVER['HTTP_REFERER']);
//    }


    /**
     * Finds the Tasks model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Tasks the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Tasks::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    /**
     * 任务备注的处理
     */
    public function actionDoRemark()
    {
        if (isset($_POST['hasEditable']))
        {
            \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
            $mdlTask = Tasks::findOne($_POST['editableKey']);
            $data = current($_POST['Tasks']);
            $mdlTask->remark = $data['remark'];
            if($mdlTask->save())
                return ['output'=>'', 'message'=>''];
        }
        return ['output'=>'', 'message'=>'save data error.'];
    }

    /**
     * 任务提交的处理
     */
    public function actionDoCommit($id)
    {
        $mdlTasks = Tasks::findOne($id);
        $mdlTasks->status = Tasks::STATUS_COMMITED;
        $mdlTasks->date = time();
        $transaction = Yii::$app->getDb()->beginTransaction();//开启事务
        $isSuc = true;//都保存成功
        $msg = '';
        //得到审批人
        $arrApprovers = Tasks::getApprovers($mdlTasks->type,$mdlTasks->type_id);
        if($mdlTasks->getOldAttribute('status')==Tasks::STATUS_UNCOMMIT&& $mdlTasks->save())//如果之前是未提交并提交成功后要给审批人生成审批任务
        {
            if(!UserTask::GenerateUserTask($arrApprovers['approvers'],$mdlTasks->id))//生成任务//如果保存错误就回滚
            {
                $msg = '生成审批时出错';
                $isSuc = false;
            }
        }
        else if($mdlTasks->getOldAttribute('status') == Tasks::STATUS_REJECTED)//如果之前是被退回
        {
            //物料被退回的提交方式：把任务改成一审，审批的approve_able改成0
            if($mdlTasks->type == Tasks::TASK_TYPE_MTR_APPROVER1||$mdlTasks->type==Tasks::TASK_TYPE_MATERIAL
                ||$mdlTasks->type == Tasks::TASK_TYPE_MTR_APPROVER2)
            {
                $mdlTasks->type = Tasks::TASK_TYPE_MTR_APPROVER1;
                if(strpos($mdlTasks->name,'新增物料')!==false)//把以前的二审三审变回到一审
                    $mdlTasks->name = ModifyMaterialController::MATERIAL_CREATE1;
                else
                    $mdlTasks->name = ModifyMaterialController::MATERIAL_UPDATE;
                //找到更新后的审批人
                $arrApprovers = Tasks::getApprovers(Tasks::TASK_TYPE_MTR_APPROVER1,$mdlTasks->type_id);
                if(!UserTask::updateAll(['approve_able'=>1,'status'=>UserTask::STATUS_UNAPPROVE,'remark'=>''],
                    ['task_id'=>$mdlTasks->id,'user_id'=>$arrApprovers['approvers'][0]]))
                {
                    $msg = '物料更新审批表时失败';
                    $isSuc = false;
                }
            }
            else if($mdlTasks->type == Tasks::TASK_TYPE_ECR1||$mdlTasks->type == Tasks::TASK_TYPE_ECR2||
                $mdlTasks->type == Tasks::TASK_TYPE_ECR3||$mdlTasks->type == Tasks::TASK_TYPE_ECR4)
            {
                UserTask::deleteAll(['task_id'=>$mdlTasks->id]);
                //把以前的二审三审变回到一审
                $mdlTasks->name = Ecr::ECR_CREATE1;
                $mdlTasks->type = Tasks::TASK_TYPE_ECR1;
                if(!$mdlTasks->save())
                    $isSuc = false;
                //按更新后的审批人生成新的审批任务
                $arrApprovers = Tasks::getApprovers(Tasks::TASK_TYPE_ECR1,$mdlTasks->type_id);
                if($isSuc&&!UserTask::GenerateUserTask($arrApprovers['approvers'],$mdlTasks->id))
                    $isSuc=false;
            }
            else if($mdlTasks->type == Tasks::TASK_TYPE_ECN1||$mdlTasks->type == Tasks::TASK_TYPE_ECN2||
                $mdlTasks->type == Tasks::TASK_TYPE_ECN3||$mdlTasks->type == Tasks::TASK_TYPE_ECN4)
            {
                UserTask::deleteAll(['task_id'=>$mdlTasks->id]);
                //把以前的二审三审变回到一审
                $mdlTasks->name = Ecn::ECN_CREATE1;
                $mdlTasks->type = Tasks::TASK_TYPE_ECN1;
                if(!$mdlTasks->save())
                    $isSuc = false;
                //按更新后的审批人生成新的审批任务
                $arrApprovers = Tasks::getApprovers(Tasks::TASK_TYPE_ECN1,$mdlTasks->type_id);
                if($isSuc&&!UserTask::GenerateUserTask($arrApprovers['approvers'],$mdlTasks->id))
                    $isSuc=false;
            }
            else//正常提交方式
            {
                if(!UserTask::updateAll(['status'=>UserTask::STATUS_UNAPPROVE,'remark'=>''],['task_id'=>$mdlTasks->id]))
                {
                    $msg = '更新审批表时失败';
                    $isSuc = false;
                }
            }
        }
        if(!$mdlTasks->save())
        {
            $msg = '保存任务表失败';
            $isSuc = false;
        }
        if($isSuc)//如果都存数据库成功就提交事务
        {
            //if($mdlTasks->type < Tasks::TASK_TYPE_ECR1 || $mdlTasks->type > Tasks::TASK_TYPE_ECR4)//ECR通过不发信
                CommonFunc::sendMail(CommonFunc::APPROVE_NOTICE,$arrApprovers['mail'],$mdlTasks->name,$arrApprovers['code'],'user-task/index');
            $transaction->commit();
            Yii::$app->getSession()->setFlash('success', "提交成功");
            return json_encode(['status' => 1, 'message' => '', 'data' => $isSuc]);
        }
        else
        {
            $transaction->rollBack();
            Yii::$app->getSession()->setFlash('error', $msg);
            return json_encode(['status' => 0, 'message' => '', 'data' => '']);
        }
    }

    /**
     * 不继续ECN后，把状改一下的功能
     */
    public function actionNoCreateEcn($id)
    {
        $model = Tasks::findOne($id);
        $model->status = Tasks::STATUS_APPROVED;
        if ($model->save())
            return json_encode(['status' => 1, 'message' => '', 'data' => '']);
        else
            return json_encode(['status' => 0, 'message' => '', 'data' => '']);
    }

    /**
     * 发送审批邮件
     */
//    static function sendEmail($taskType,$taskName)
//    {
//        $users = array();
//        foreach (self::$usersApprove as $id) {
//            $model = User::findOne($id);
//            array_push($users, $model->email);
//        }
//
//        return Yii::$app->mailer->compose(['html' => 'noticeApprove-html'],
//            ['taskType'=>$taskType,'taskName'=>$taskName,'link'=>'tasks/index'])
//            ->setFrom([Yii::$app->params['supportEmail'] => Yii::$app->name . ' robot'])
//            ->setTo($users)
//            ->setSubject('通知——来自' . Yii::$app->name)
//            ->send();
//    }


}
