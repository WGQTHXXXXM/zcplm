<?php

namespace frontend\controllers;

use Yii;
use frontend\models\ModifyMaterial;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use frontend\models\Tasks;
use frontend\models\MaterialEncodeRule;
use yii\helpers\ArrayHelper;
use frontend\models\Materials;
use frontend\models\UserTask;
use common\components\CommonFunc;
use yii\bootstrap\Html;

/**
 * ModifyMaterialController implements the CRUD actions for ModifyMaterial model.
 */
class ModifyMaterialController extends Controller
{
    const MATERIAL_CREATE = '新增物料';
    const MATERIAL_UPDATE = '更新物料';
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all ModifyMaterial models.
     * @return mixed
     */
    public function actionIndex()
    {
        $dataProvider = new ActiveDataProvider([
            'query' => ModifyMaterial::find(),
        ]);

        return $this->render('index', [
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single ModifyMaterial model.
     * @param string $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new ModifyMaterial model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     *
     */
    public function actionCreate()
    {
        $modelMtr = new ModifyMaterial();
        $transaction = Yii::$app->getDb()->beginTransaction();//开启事务
        if ($modelMtr->load(Yii::$app->request->post())) {
            $isSuc = $modelMtr->save();
            if($isSuc && $_POST['taskCommit']==1 && !$this->generateTask($modelMtr->id,$this::MATERIAL_CREATE,Tasks::STATUS_COMMITED,$_POST['taskRemark']))//立即提交
                $isSuc = false;
            else if($isSuc&&$_POST['taskCommit']==0 && !$this->generateTask($modelMtr->id,$this::MATERIAL_CREATE))//稍后提交
                $isSuc = false;

            if($isSuc)
            {
                Yii::$app->getSession()->setFlash('success', "成功，提交任务");
                $transaction->commit();
                return $this->redirect(['/tasks/index']);
            }
            else
            {
                Yii::$app->getSession()->setFlash('error', "保存失败");
                $transaction->rollBack();
            }
        }
        $class1 = MaterialEncodeRule::find()->select('name,root')->where(['lvl'=>0])->OrderBy('root')->asArray()->all();
        return $this->render('create', [
            'model' => $modelMtr,
            'class1' => $class1,
        ]);

    }

    /**
     * 新建一个创建物料的任务
     */
    private function generateTask($id,$taskName,$status=Tasks::STATUS_UNCOMMIT ,$remark='')
    {
        //生成任务
        $Author = Yii::$app->user->id;//创建者
        $task = new Tasks();
        $task->name = $taskName;
        $task->status=$status;
        $task->remark = $remark;
        //如果是立即提交
        if($status == Tasks::STATUS_COMMITED)//如果是立即提交的要改数据
        {
            $task->status=$status;
            $task->remark = $remark;
        }
        $task->type = $task::TASK_TYPE_MATERIAL;
        $task->type_id = $id;
        $task->date = time();
        $task->user_id = $Author;
        //如果任务保存成功再生成用户任务表
        if($task->save())
        {
            if($status == Tasks::STATUS_COMMITED)//如果是立即提交的要加审批
            {
                foreach (TasksController::$usersApprove as $userId)//生成审批任务
                {
                    $userTask = new UserTask();
                    $userTask->task_id = $task->id;
                    $userTask->user_id = $userId;
                    $userTask->updated_at = time();
                    $userTask->status = 0;
                    if(!$userTask->save())
                        return false;
                }
                TasksController::sendEmail($task->name,$task->modifyMaterial->mfr_part_number);
            }
            return true;
        }
        else
            return false;

    }

    /**
     * 检测这个料是否在审批当中
     */
    public function actionCheckMaterial($id)
    {
        $model = ModifyMaterial::find()->where(['material_id'=>$id])->orderBy('id desc')->all();
        if(empty($model))//没有这个料得新建的料
            return json_encode(['status' => 1, 'message' => '', 'data' => '']);
        else//说明中间物料库里有这个料，
        {
            //看这个中间料在审批中是否被通过
            $mdltask = Tasks::findOne(['type'=>Tasks::TASK_TYPE_MATERIAL,'type_id'=>$model[0]->id]);
            if($mdltask->status == Tasks::STATUS_APPROVED)//如果是已经审批通过就可以新建再更新
                return json_encode(['status' => 1, 'message' => '', 'data' => '']);
            else//否则不允许更新
                return json_encode(['status' => 0, 'message' => '这颗料正在被审批', 'data' => '']);
        }
    }

    /**
     * Updates an existing ModifyMaterial model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     */
    public function actionUpdate($id,$material)
    {
        if($material == 1)//说明是从物料库来的链接
        {
            $mdlMtr = Materials::findOne($id);
            $model = new ModifyMaterial();
            $model->assy_level = $mdlMtr->assy_level;
            $model->purchase_level = $mdlMtr->purchase_level;
            $model->mfr_part_number = $mdlMtr->mfr_part_number;
            $model->description = $mdlMtr->description;
            $model->pcb_footprint = $mdlMtr->pcb_footprint;
            $model->manufacturer = $mdlMtr->manufacturer;
            $model->zc_part_number = $mdlMtr->zc_part_number;
            $model->date_entered = $mdlMtr->date_entered;
            $model->vehicle_standard = $mdlMtr->vehicle_standard;
            $model->part_type = $mdlMtr->part_type;
            $model->value = $mdlMtr->value;
            $model->schematic_part = $mdlMtr->schematic_part;
            $model->price = $mdlMtr->price;
            $model->recommend_purchase = $mdlMtr->recommend_purchase;
            $model->minimum_packing_quantity = $mdlMtr->minimum_packing_quantity;
            $model->lead_time = $mdlMtr->lead_time;
            $model->manufacturer2_id = $mdlMtr->manufacturer2_id;
            $model->manufacturer3_id = $mdlMtr->manufacturer3_id;
            $model->manufacturer4_id = $mdlMtr->manufacturer4_id;
            $model->material_id = $mdlMtr->material_id;
            $model->is_first_mfr = $mdlMtr->is_first_mfr;
        }
        else if($material == 0)//说明不是从物料库来的链接，从中间物料库来的，被退回的物料
            $model = $this->findModel($id);
        if($model->load(Yii::$app->request->post()))//点击的是更新按钮
        {
            $transaction = Yii::$app->getDb()->beginTransaction();//开启事务
            $isSuc = true;
            //保存二，三，四供
            if(!empty(Yii::$app->request->post()['ModifyMaterial']['mfrPartNo2']))
                $model->manufacturer2_id = Materials::findOne(['zc_part_number'=>Yii::$app->request->post()['ModifyMaterial']['mfrPartNo2']])->material_id;
            else
                $model->manufacturer2_id = "";
            if(!empty(Yii::$app->request->post()['ModifyMaterial']['mfrPartNo3']))
                $model->manufacturer3_id = Materials::findOne(['zc_part_number'=>Yii::$app->request->post()['ModifyMaterial']['mfrPartNo3']])->material_id;
            else
                $model->manufacturer3_id = "";
            if(!empty(Yii::$app->request->post()['ModifyMaterial']['mfrPartNo4']))
                $model->manufacturer4_id = Materials::findOne(['zc_part_number'=>Yii::$app->request->post()['ModifyMaterial']['mfrPartNo4']])->material_id;
            else
                $model->manufacturer4_id = "";

            if(!$model->save())//保存或更新大表
                $isSuc = false;
            //生成任务
            if($isSuc&&$material == 1)//如果成功并且是新的更新就要新建一个提交任务
            {
                if($isSuc && $_POST['taskCommit']==1)//立即提交
                {
                    if(!$this->generateTask($model->id,$this::MATERIAL_UPDATE,Tasks::STATUS_COMMITED,$_POST['taskRemark']))
                        $isSuc = false;
                }
                else if($isSuc&&$_POST['taskCommit']==0)//稍后提交
                {
                    if(!$this->generateTask($model->id,$this::MATERIAL_UPDATE))
                        $isSuc = false;
                }
            }
            else if($isSuc&&$material == 0&& $_POST['taskCommit']==1)//如果是更新的是被退回的物料并且要马上更新，只改下状就可以
            {
                $mdlTask = Tasks::findOne(['type'=>Tasks::TASK_TYPE_MATERIAL,'type_id'=>$model->id]);
                $mdlTask->status = Tasks::STATUS_COMMITED;
                $mdlTask->remark = $_POST['taskRemark'];
                $mdlTask->date = time();
                if(!$mdlTask->save())
                    $isSuc = false;
                if(!UserTask::updateAll(['status'=>UserTask::STATUS_UNAPPROVE,'remark'=>''],['task_id'=>$mdlTask->id]))
                    $isSuc = false;
            }

            //如果保存成功提交，不成功撤回并提示
            if($isSuc)
            {
                Yii::$app->getSession()->setFlash('success', "成功，提交任务");
                $transaction->commit();
                return $this->redirect(['/tasks/index']);
            }
            else
            {
                Yii::$app->getSession()->setFlash('error', "更新出错");
                $transaction->rollBack();
                return $this->showUpdateView($model);
            }
        }
        else//更新界面
            return $this->showUpdateView($model);
    }

    /**
     * 更新界面
     */
    public function showUpdateView($model)
    {
        $partType = MaterialEncodeRule::findOne($model->part_type);
        $model->class1 = MaterialEncodeRule::find()->where(['root'=>$partType->root,'lvl'=>0])->select('id')->all()[0]->id;
        $class2data = MaterialEncodeRule::find()->where(['lvl'=>1,'root'=>$partType->root])->andWhere(['<','lft',$partType->lft])
            ->andWhere(['>','rgt',$partType->rgt])->select('id,lft,rgt,remark')->all()[0];
        $model->class2 = $class2data->id;
        //一类
        $class1 = MaterialEncodeRule::find()->select('name,root')->where(['lvl'=>0])->OrderBy('root')->all();
        //二类
        $class2 = MaterialEncodeRule::find()->select('name,id')->where(['lvl'=>1,'root'=>$partType->root])->all();
        //以下是形成智车料号的下拉框
        $dataDropMsg = [];
        $componentPos = MaterialEncodeRule::find()->where(['lvl'=>2,'root'=>$partType->root])->andWhere(['>','lft',$class2data->lft])
            ->andWhere(['<','rgt',$class2data->rgt])->OrderBy('lft')->select('name,root,lft,rgt')->all();//三级分类
        $zcPartNum = $model->zc_part_number;
        if(strtolower($class2data->remark) == 'pcba'||strtolower($class2data->remark) == 'pcb')//如果是pcb的，只给后面的几个input框分配值
        {
            $model->mer4 = substr($zcPartNum,1,2);
            $model->mer7 = substr($zcPartNum,3,4);
            $model->mer8 = substr($zcPartNum,7,2);
            $model->mer9 = substr($zcPartNum,9,2);

        }
        else//其它要给下拉框分配值
        {
            foreach ($componentPos as $key=>$val)
            {
                //得到下拉框的数据
                $componentDetail = MaterialEncodeRule::find()->where(['lvl'=>3,'root'=>$val->root])->andWhere(['>','lft',$val->lft])
                    ->andWhere(['<','rgt',$val->rgt])->select('id,name,remark')->OrderBy('lft')->asArray()->all();
                $dataDropMsg[] = $componentDetail;
                //解析智车料号
                if(empty($componentDetail))//是输入的值
                {
                    switch ($class2data->remark)
                    {
                        case 'RES':
                        case 'BEA':
                            $model->mer4 = substr($zcPartNum,0,4);
                            $zcPartNum = substr($zcPartNum,4);
                            break;
                        case 'CAP':
                        case 'IND':
                            $model->mer4 = substr($zcPartNum,0,3);
                            $zcPartNum = substr($zcPartNum,3);
                            break;
                    }
                }
                else if($key<5)//下拉框
                {
                    $len = strlen($componentDetail[0]['remark']);
                    $arrTemp = ArrayHelper::map($componentDetail, 'remark', 'name');
                    if($key == 0)//第一位是组装区域
                    {
                        $model->mer1 = substr($zcPartNum,0,1);
                        $zcPartNum = substr($zcPartNum,4);
                        array_unshift($dataDropMsg[$key],['remark'=>'','name'=>'请选择'.$val->name.'...']);
                    }
                    else if($key != 3)
                    {
                        array_unshift($dataDropMsg[$key],['remark'=>'','name'=>'请选择'.$val->name.'...']);
                        $mer = 'mer'.++$key;
                        $model->$mer = substr($zcPartNum,0,$len);
                        $zcPartNum = substr($zcPartNum,$len);
                    }
                }
            }
            //厂家
            $classManufacturer =end($dataDropMsg);
            array_unshift($classManufacturer,['id'=>'','name'=>'请选择厂家...']);
        }

        return $this->render('update', [
            'model' => $model,
            'class1' => $class1,
            'class2' => $class2,
            'manufacturer'=>empty($classManufacturer)?"":$classManufacturer,
            'dataDropMsg'=>$dataDropMsg,
        ]);
    }

    /**
     * Deletes an existing ModifyMaterial model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the ModifyMaterial model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return ModifyMaterial the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = ModifyMaterial::findOne($id)) !== null) {
            $model->mfrPartNo2 = empty($model->manufacturer2_id)?"":$model->manufacturer2->zc_part_number;
            $model->mfrPartNo3 = empty($model->manufacturer3_id)?"":$model->manufacturer3->zc_part_number;
            $model->mfrPartNo4 = empty($model->manufacturer4_id)?"":$model->manufacturer4->zc_part_number;
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    /**
     * 通过选中第三级分类，确定其下面跟生成描述相关的各项（剩下所有的分类）;
     */
    public function actionGetDescriptionOptionsByClass3id($class3Val)
    {
        $component = MaterialEncodeRule::findOne($class3Val);
        $data = [];
        $status = 1;
        //得到三级分类下描述相关各项的名字
        $componentPos = MaterialEncodeRule::find()->where(['lvl'=>4,'root'=>$component->root])->andWhere(['>','lft',$component->lft])
            ->andWhere(['<','rgt',$component->rgt])->OrderBy('lft')->select('name,root,lft,rgt')->all();
        if(empty($componentPos))//没有数据返回
            return json_encode(['status'=>0,'message'=>'三级分类下没有生成描述相关的各项信息！找管理员添加！','data'=>$data]);

        //获得更深一层各下拉选项信息
        foreach ($componentPos as $key => $val)
        {
            $componentDetail = MaterialEncodeRule::find()->where(['lvl'=>5,'root'=>$val->root])->andWhere(['>','lft',$val->lft])
                ->andWhere(['<','rgt',$val->rgt])->select('id,name,remark')->all();
            if ($val->name == "无") {
                $val->name = $val->name . $key;
            }
            //环保等级暂时不用，故不创建环保等级这个数组;需要用时再讲该if语句删除
            if ($val->name == "环保等级") {
                continue;
            }
            $data[$val->name] = [];
            foreach ($componentDetail as $code)
            {
                $data[$val->name][] = ['id'=>$code->id,'remark'=>$code->remark,'name'=>$code->name];
            }
        }
        return json_encode(['status'=>$status,'message'=>'','data'=>$data]);
    }

    /**
     * 检测是否有相同的厂家料号
     */
    public function actionCheckMfrPartNo($mfrPartNo,$mfr)
    {
        $data = Materials::find()->select("manufacturer,mfr_part_number")->where(['mfr_part_number'=>$mfrPartNo])->all();
        if(empty($data))
            return json_encode(['status'=>0,'message'=>'','data'=>'']);
        $str = '';
        $status = 0;
        foreach ($data as $partNo)
        {
            if($partNo->manufacturer == $mfr)
                $status = 1;
            $str .= "<br/>厂家：".$partNo->manufacturer1->name;
        }
        return json_encode(['status'=>$status,'message'=>"输入的厂家料号".$data[0]->mfr_part_number."在库里已有相同的".$str,'data'=>'']);
    }

    /**
     * 反回一个料的所有厂家
     */
    public function actionGetMfrByPartno($mfrPartNo)
    {
        $data = Materials::find()->select("manufacturer,mfr_part_number")->where(['mfr_part_number'=>$mfrPartNo])->all();
        if(empty($data))
            return json_encode(['status'=>0,'message'=>'','data'=>'']);
        $str = '';
        foreach ($data as $partNo)
        {
            $str .= "<br/>厂家：".$partNo->manufacturer1->name;
        }
        return json_encode(['status'=>1,'message'=>"输入的厂家料号".$data[0]->mfr_part_number."在库里已有相同的".$str,'data'=>'']);
    }


    /*
     * 根据料号一部分名字返回流水号
     */
    public function actionGetSerialNum($code)
    {
        $count = Materials::find()->select('zc_part_number')->where(['like','zc_part_number',$code.'%',false])->count();
        return json_encode(['status'=>1,'message'=>'','data'=>$count]);
    }

    /*
     * 输入结构的智车料号，返回应该的流水号
     */
    public function actionGetStructSn($zcCode)
    {
        $materialLike = Materials::find()->select('zc_part_number')->where(['like','zc_part_number',$zcCode.'%',false])->all();
        if(empty($materialLike))
            return json_encode(['status'=>1,'message'=>'','data'=>0]);
        else
        {
            foreach ($materialLike as $zcPartNos)
            {
                $arrTemp[] = substr($zcPartNos->zc_part_number,-1,1);
            }
            $data = array_unique($arrTemp);
            natsort($data);
        }
        return json_encode(['status'=>1,'message'=>'','data'=>end($data)+1]);

    }

    /**
     * ajax通过一级分类找二级分类，返回前端
     */
    public function actionGetClass2ByClass1id($class1Val)
    {
        $data = MaterialEncodeRule::find()->select('name,id')->where(['root'=>$class1Val,'lvl'=>1])->OrderBy('lft')->asArray()->all();

        return json_encode(['status'=>1,'message'=>'','data'=>$data]);
    }

    /*
     * 通过选中第二级分类，确定第三级（剩下所有的分类）;
     */
    public function actionGetClass3ByClass2id($class2Val)
    {
        $component = MaterialEncodeRule::findOne($class2Val);
        $data = [];
        $status = 1;
        //如果是结构的物料,现在是做死的，不用规则里的数据
        if($component->getFather()->name == '结构')
            $status = 3;
        //得到三级分类的名字
        $componentPos = MaterialEncodeRule::find()->where(['lvl'=>2,'root'=>$component->root])->andWhere(['>','lft',$component->lft])
            ->andWhere(['<','rgt',$component->rgt])->OrderBy('lft')->select('name,root,lft,rgt')->all();
        if(empty($componentPos))//没有数据返回
            return json_encode(['status'=>0,'message'=>'没有三级分类！找管理员添加！','data'=>$data]);
        //如果是PCB和PCBA
        $componentName = strtolower($component->name);//物料的名字
        if($componentName == 'pcb'||$componentName == 'pcba')
            $status = 2;
        //其它物料
        foreach ($componentPos as $val)
        {
            $componentDetail = MaterialEncodeRule::find()->where(['lvl'=>3,'root'=>$val->root])->andWhere(['>','lft',$val->lft])
                ->andWhere(['<','rgt',$val->rgt])->OrderBy('lft')->select('id,name,remark')->all();
            $data[$val->name] = [];
            foreach ($componentDetail as $code)
            {
                $data[$val->name][] = ['id'=>$code->id,'remark'=>$code->remark,'name'=>$code->name];
            }
        }
        return json_encode(['status'=>$status,'message'=>'','data'=>$data]);
    }

    /**
     * 根据输入的厂家料号，获得这个料的其它数据get-part-data
     */
    public function actionGetPartData($zcPartNo)
    {
        $data = Materials::findOne(['zc_part_number'=>$zcPartNo]);
        if(empty($data))
            return json_encode(['status'=>0,'message'=>'','data'=>$data]);

        $id = $data->material_id;
        return json_encode(['status'=>1,'message'=>'','data'=>$id]);
    }

    /** 获得模具流水号
     * @param $zcCodePart:智车料号的前几位
     * @param $class2Val：613正常结构物料。614总成物料
     * @param $id：检第四位，还是第五位
     * @return string：ajax接口数据
     */
    public function actionGetStructMoju($zcCodePart,$class2Val,$id)
    {
        $materialLike = Materials::find()->select('zc_part_number')->where(['like','zc_part_number',$zcCodePart.'%',false])->all();
        $data=[];
        if(empty($materialLike))
            return json_encode(['status'=>0,'message'=>'没有匹配的料号','data'=>$data]);
        else
        {
            if($class2Val==613&&$id==4){
                $start = 6;$len = 3;
            }else if($class2Val==613&&$id==5){
                $start = 9;$len = 2;
            }else if($class2Val==614){
                $start = 6;$len = 5;
            }

            foreach ($materialLike as $zcPartNos)
            {
                $arrTemp[] = substr($zcPartNos->zc_part_number,$start,$len);
            }
            $data = array_unique($arrTemp);
            natsort($data);
        }
        return json_encode(['status'=>1,'message'=>'','data'=>array_values($data)]);
    }


    /**
     * 检测是否有相同的一供智车料号
     */
    public function actionCheckZcPartNo($zcPartNo)
    {
        $count = Materials::find()->where(['zc_part_number'=>$zcPartNo])->count();
        if ($count == 0)
            return json_encode(['status'=>1,'message'=>'','data'=>$count]);
        else
            return json_encode(['status'=>0,'message'=>"生成的一供智车料号".$zcPartNo."在库里已存在",'data'=>$count]);
    }
}
