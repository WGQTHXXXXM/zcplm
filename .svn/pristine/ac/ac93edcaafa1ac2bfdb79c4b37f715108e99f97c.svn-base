<?php

namespace frontend\controllers;

use Yii;
use frontend\models\BomsParent;
use frontend\models\BomsChild;
use frontend\models\Materials;
use yii\data\ArrayDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\helpers\Json;
use common\components\CommonFunc;
use yii\base\Model;

/**
 * BomsController implements the CRUD actions for BomsChild model.
 */
class BomsController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all BomsChild models.
     * @return mixed
     */
    public function actionIndex($material_id, $parent_version = null, $forward = true, $multiLevel = true)
    {
        if (Yii::$app->request->isAjax) {
            if ($parent_version != null) {
                //分层查找法
                if ($forward) {//正向查询
                    $data = BomsChild::forwardQuery($material_id, $parent_version, true);
                } else {//逆向查询
                    $data = BomsChild::reverseQuery($material_id, $multiLevel);
                }

                //遍历多维数组，并在数组项之间建立父子关系，生成树型结构数组
                $data = BomsChild::generateTreeArray($data, $data[0]['parent_id']);
            } else { //如果在boms_parent表中未查到版本，说明该物料没有子级，则另定义一个$data数据
                $model = Materials::findOne($material_id);
                $data = array();
                $data[0]['parent_id'] = null;
                $data[0]['child_id'] = $material_id;
                $data[0]['zc_part_number'] = $model->zc_part_number;
                $data[0]['purchase_level'] = $model->purchase_level;
                $data[0]['part_name'] = $model->part_name;
                $data[0]['description'] = $model->description;
                $data[0]['pcb_footprint'] = $model->pcb_footprint;
                $data[0]['mfr_part_number'] = $model->mfr_part_number;
            }

            return Json::encode($data);
        }

     //   $model = $this->findModel($id);
        $model = BomsParent::find()->where(['parent_id' => $material_id, 'parent_version' => $parent_version])->one();
        if (!$model) {
            $model = new BomsParent();
            $model->parent_id = $material_id;
        //    return $this->redirect(['/materials/view', 'id' => $material_id]);
        }
     /*   if ($forward) {//正向查询
            //如果该id对应的bom版本状态是未发布，则有可能并不是该bom版本的实际状态，重新搜索所有状态并按状态降序排序，将排在最前的指定给$model
            if ($model->status == Boms::STATUS_UNRELEASE) {
                $boms = Boms::find()->where(['child_id' => $model->child_id, 'child_version' => $model->child_version])->orderBy('status DESC')->all();
                $model = $boms[0];
            }
        } else {//逆向查询，找出最新的版本及其实际发布状态
            $boms = Boms::find()->where(['child_id' => $model->child_id])->orderBy('child_version DESC, status DESC, created_at')->all();
            $model = $boms[0];
        }*/
        //获得选定料号的版本列表
        $versionList = BomsParent::find()->select(['parent_version'])->distinct()->where(['parent_id' => $material_id])->orderBy('parent_version')->asArray()->all();

        return $this->render('index', [
            'model' => $model,
            'versionList' => Json::encode($versionList),
            'forward' => $forward,
            'multiLevel' => $multiLevel,
        ]);
    }

    public function actionCompare()
    {
        $models[] = new BomsParent();
        $models[] = new BomsParent();

        //查出有子级的所有物料数组
        $parent_code = BomsParent::find()->select(['parent_id', 'materials.zc_part_number'])->distinct('parent_id')->innerJoinWith('material')->orderBy('materials.zc_part_number')->asArray()->all();

        return $this->render('compare', [
            'model' => $models,
            'parent_code' => $parent_code,
        ]);
    }

    public function actionCompareView()
    {
        $models[] = new BomsParent();
        $models[] = new BomsParent();

        if (Model::loadMultiple($models, Yii::$app->request->post()) && Model::validateMultiple($models)) {
            $data = array();
            foreach ($models as $k => $model) {
                //只查询单级Bom
                $data[] = BomsChild::forwardQuery($model->parent_id, $model->parent_version, false);
                /*
                //遍历多维数组，并在数组项之间建立父子关系，生成树型结构数组
                $data[$k] = Boms::generateTreeArray($data[$k], $data[$k][0]['parent_id']);
                //遍历树型结构数组，生成列表结构数组
                $data[$k] = Boms::generateListArray($data[$k], 'children');
                */
                //删除不用字段
                foreach ($data[$k] as $key=>$val) {
                    unset($data[$k][$key]['level']);
                    unset($data[$k][$key]['id']);
                    unset($data[$k][$key]['parent_id']);
                    unset($data[$k][$key]['parent_version']);
                    unset($data[$k][$key]['child_version']);
                    unset($data[$k][$key]['status']);
                    unset($data[$k][$key]['release_time']);
                    unset($data[$k][$key]['effect_date']);
                    unset($data[$k][$key]['expire_date']);
                    unset($data[$k][$key]['mfr_part_number']);
                    unset($data[$k][$key]['manufacturer']);
                    unset($data[$k][$key]['mfr_part_number2']);
                    unset($data[$k][$key]['manufacturer2']);
                    unset($data[$k][$key]['mfr_part_number3']);
                    unset($data[$k][$key]['manufacturer3']);
                    unset($data[$k][$key]['mfr_part_number4']);
                    unset($data[$k][$key]['manufacturer4']);
                    unset($data[$k][$key]['purchase_level']);
                    unset($data[$k][$key]['part_name']);
                    unset($data[$k][$key]['description']);
                    unset($data[$k][$key]['unit']);
                    unset($data[$k][$key]['pcb_footprint']);
                }

                $models[$k]->zc_part_number = $data[$k][0]['zc_part_number'];
                //数组中的第一个元素是比较bom的料号及版本信息，删除
                array_shift($data[$k]);
            }
            //比较bom1相对于bom2的差集
            $arr_bom1diffbom2 = array_udiff($data[0], $data[1], function ($a, $b) {
                if ($a === $b) {
                    return 0;
                }
                return ($a > $b) ? 1 : -1;
            });
            //比较bom2相对于bom1的差集
            $arr_bom2diffbom1 = array_udiff($data[1], $data[0], function ($a, $b) {
                if ($a === $b) {
                    return 0;
                }
                return ($a > $b) ? 1 : -1;
            });

            $arr_tmp1 = $arr_bom1diffbom2;
            $arr_tmp2 = $arr_bom2diffbom1;
            foreach ($arr_tmp1 as $k1 => $v1) {
                foreach ($arr_tmp2 as $k2 => $v2) {
                    if ($v1['zc_part_number'] == $v2['zc_part_number']) {//zc_part_number相同时，如其它项也相同，不显示
                        if ($v1['qty'] == $v2['qty']) {
                            $arr_bom1diffbom2[$k1]['qty'] = null;
                            $arr_bom2diffbom1[$k2]['qty'] = null;
                        }
                        if ($v1['ref_no'] == $v2['ref_no']) {
                            $arr_bom1diffbom2[$k1]['ref_no'] = null;
                            $arr_bom2diffbom1[$k2]['ref_no'] = null;
                        }
                        if ($v1['zc_part_number2'] == $v2['zc_part_number2']) {
                            $arr_bom1diffbom2[$k1]['zc_part_number2'] = null;
                            $arr_bom2diffbom1[$k2]['zc_part_number2'] = null;
                        }
                        if ($v1['zc_part_number3'] == $v2['zc_part_number3']) {
                            $arr_bom1diffbom2[$k1]['zc_part_number3'] = null;
                            $arr_bom2diffbom1[$k2]['zc_part_number3'] = null;
                        }
                        if ($v1['zc_part_number4'] == $v2['zc_part_number4']) {
                            $arr_bom1diffbom2[$k1]['zc_part_number4'] = null;
                            $arr_bom2diffbom1[$k2]['zc_part_number4'] = null;
                        }
                    } elseif ($v1['ref_no'] != null && $v1['ref_no'] == $v2['ref_no']) { //如果位号不空，且相同，则视为替换关系
                        $arr_tmp3 = $arr_bom1diffbom2[$k1];
                        $arr_tmp4 = $arr_bom2diffbom1[$k2];
                        unset($arr_bom1diffbom2[$k1]);
                        unset($arr_bom2diffbom1[$k2]);
                        $arr_bom1diffbom2[$k1]['zc_part_number'] = $arr_tmp3['zc_part_number'];
                        $arr_bom2diffbom1[$k2]['zc_part_number'] = $arr_tmp4['zc_part_number'];
                        if ($v1['zc_part_number2'] != $v2['zc_part_number2']) {
                            $arr_bom1diffbom2[$k1]['zc_part_number2'] = $arr_tmp3['zc_part_number2'];
                            $arr_bom2diffbom1[$k2]['zc_part_number2'] = $arr_tmp4['zc_part_number2'];
                        }
                        if ($v1['zc_part_number3'] != $v2['zc_part_number3']) {
                            $arr_bom1diffbom2[$k1]['zc_part_number3'] = $arr_tmp3['zc_part_number3'];
                            $arr_bom2diffbom1[$k2]['zc_part_number3'] = $arr_tmp4['zc_part_number3'];
                        }
                        if ($v1['zc_part_number4'] != $v2['zc_part_number4']) {
                            $arr_bom1diffbom2[$k1]['zc_part_number4'] = $arr_tmp3['zc_part_number4'];
                            $arr_bom2diffbom1[$k2]['zc_part_number4'] = $arr_tmp4['zc_part_number4'];
                        }
                    }
                }
            }
            //   var_dump($arr_bom1diffbom2);
            //   var_dump($arr_bom2diffbom1);
            $provider_bom1diffbom2 = new ArrayDataProvider([
                'allModels' => $arr_bom1diffbom2,
                'pagination' => [
                    'pageSize' => 10000,
                ],
            ]);
            $provider_bom2diffbom1 = new ArrayDataProvider([
                'allModels' => $arr_bom2diffbom1,
                'pagination' => [
                    'pageSize' => 10000,
                ],
            ]);

            return $this->render('compare-view', [
                'models' => $models,
                'provider_bom1diffbom2' => $provider_bom1diffbom2,
                'provider_bom2diffbom1' => $provider_bom2diffbom1,
            ]);
        }
    }

    /**
     * Creates a new Boms model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Boms();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing Boms model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing Boms model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Boms model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Boms the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = BomsParent::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    /**
     * @DESC 数据导出
     * @param integer $id
     * @param bool $multiLevel
     */
    public function actionExportData($material_id, $parent_version = null, $multiLevel = true)
    {
        if ($parent_version == null) { //如果在boms_parent表中未查到版本，说明该物料没有子级，不进行导出操作
            return $this->redirect(['/boms/index', 'material_id' => $material_id, 'parent_version' => $parent_version, 'forward' => 1]);
        }
            //分层查找法
        BomsChild::forwardQuery($material_id, $parent_version, $multiLevel, false);
        $sql = "SELECT m1.zc_part_number, b.level, m1.purchase_level, b.parent_id, b.child_id, m1.part_name, m1.description, m1.pcb_footprint, b.qty, m1.unit, b.ref_no, 
                 m1.mfr_part_number, mer1.name AS manufacturer, 
                 m2.zc_part_number AS zc_part_number2, m2.mfr_part_number AS mfr_part_number2, mer2.name AS manufacturer2, 
                 m3.zc_part_number AS zc_part_number3, m3.mfr_part_number AS mfr_part_number3, mer3.name AS manufacturer3, 
                 m4.zc_part_number AS zc_part_number4, m4.mfr_part_number AS mfr_part_number4, mer4.name AS manufacturer4 
                 FROM tmp_boms1 AS b 
                 LEFT JOIN materials AS m1 ON b.child_id=m1.material_id LEFT JOIN material_encode_rule AS mer1 ON mer1.id=m1.manufacturer 
                 LEFT JOIN materials AS m2 ON b.zc_part_number2_id=m2.material_id LEFT JOIN material_encode_rule AS mer2 ON mer2.id=m2.manufacturer 
                 LEFT JOIN materials AS m3 ON b.zc_part_number3_id=m3.material_id LEFT JOIN material_encode_rule AS mer3 ON mer3.id=m3.manufacturer 
                 LEFT JOIN materials AS m4 ON b.zc_part_number4_id=m4.material_id LEFT JOIN material_encode_rule AS mer4 ON mer4.id=m4.manufacturer";
        $data = Yii::$app->db->createCommand($sql)->queryAll();

        //遍历多维数组，并在数组项之间建立父子关系，生成树型结构数组
        $data = BomsChild::generateTreeArray($data, $data[0]['parent_id']);
        //遍历树型结构数组，生成列表结构数组
        $data = BomsChild::generateListArray($data, 'children');
        //删除parent_id, child_id字段
        foreach ($data as $key=>$val) {
            unset($data[$key]['parent_id']);
            unset($data[$key]['child_id']);
        }

        if ($data) { // 数据处理
            // 给每一行记录添加Item序号
            for ($item=0; $item<count($data); $item++) {
                array_unshift($data[$item], $item+1);
            }
        }
        $header = [
            ['header'=>"Item", 'width'=>7],
            ['header'=>Yii::t('material', 'Zhiche Part Number'), 'width'=>20],
            ['header'=>Yii::t('bom', 'Assy Level'), 'width'=>8],
            ['header'=>Yii::t('material', 'Purchase Level'), 'width'=>8],
            ['header'=>Yii::t('material', 'Part Name'), 'width'=>20],
            ['header'=>Yii::t('material', 'Description'), 'width'=>35],
            ['header'=>Yii::t('material', 'Pcb Footprint'), 'width'=>15],
            ['header'=>Yii::t('bom', 'Qty'), 'width'=>7],
            ['header'=>Yii::t('material', 'Unit'), 'width'=>7],
            ['header'=>Yii::t('bom', 'Reference No.'), 'width'=>25],
            ['header'=>Yii::t('material', 'Manufacturer Part Number'), 'width'=>20],
            ['header'=>Yii::t('material', 'Manufacturer'), 'width'=>15],
            ['header'=>Yii::t('material', 'Second Zhiche Part Number'), 'width'=>20],
            ['header'=>Yii::t('material', 'Second Manufacturer Part Number'), 'width'=>20],
            ['header'=>Yii::t('bom', 'Second Manufacturer'), 'width'=>15],
            ['header'=>Yii::t('material', 'third Zhiche Part Number'), 'width'=>20],
            ['header'=>Yii::t('material', 'third Manufacturer Part Number'), 'width'=>20],
            ['header'=>Yii::t('bom', 'Third Manufacturer'), 'width'=>15],
            ['header'=>Yii::t('material', 'fourth Zhiche Part Number'), 'width'=>20],
            ['header'=>Yii::t('material', 'fourth Manufacturer Part Number'), 'width'=>20],
            ['header'=>Yii::t('bom', 'Fourth Manufacturer'), 'width'=>15],
        ]; //导出excel的表头
        CommonFunc::exportData($data, $header, "Sheet1", "Export Bom");
    }

    public function actionGetVersionListByParentId($parent_id)
    {
        //获得选定料号的版本列表
        $versionList = BomsParent::find()->select(['parent_version'])->distinct()->where(['parent_id' => $parent_id])->orderBy('parent_version')->asArray()->all();
        return json_encode(['status'=>1,'message'=>'','data'=>$versionList]);
    }

    public function actionGetVersionByChildId($child_id,$bom_expire_date)
    {
        //获得选定料号在该bom中的有效版本
        $sql = "SELECT max(parent_version) AS parent_version FROM boms_parent WHERE parent_id={$child_id} AND pv_effect_date<{$bom_expire_date}";
        $row = Yii::$app->db->createCommand($sql)->queryOne();
        return json_encode(['status'=>1,'message'=>'','data'=>$row['parent_version']]);
    }
}
